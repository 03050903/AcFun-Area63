apply plugin: 'com.android.application'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':lib-swipebacklayout')
    compile project(':lib-pulltorefresh')
    compile project(':lib-byakugallery')
    compile 'org.jsoup:jsoup:1.8.1'
    compile 'com.alibaba:fastjson:1.1.45.android'
    compile 'com.android.support:appcompat-v7:20.0.0@aar'
    compile 'com.astuetz:pagerslidingtabstrip:1.0.1@aar'
    compile 'com.mcxiaoke.volley:library:1.0.+'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.1.+'
}
android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "tv.acfun.a63"
        minSdkVersion 9
        targetSdkVersion 21
        versionCode 41
        versionName "1.4.1"
        resConfigs "zh", "zh-rCN", "zh-rHK", "zh-rTW"
        manifestPlaceholders = [UMENG_APPKEY_VALUE: '523706eb56240b0db70293fe',
                                UMENG_CHANNEL_VALUE: 'GooglePlay']
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    if(hasKeyStore()) {
        signingConfigs {
            release {
                storeFile file(STORE_FILE)
                storePassword STORE_PASSWORD
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
            }
        }
        buildTypes {
            release {
                minifyEnabled true
                shrinkResources true
                signingConfig signingConfigs.release
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            }
        }
    }

    productFlavors{
        XiaoMi{}
        Meizu{}
        GooglePlay{}
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    applicationVariants.all { variant ->
        if(variant.name.endsWith('Release')){
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null) {
                    def fileName = "${defaultConfig.applicationId}_${defaultConfig.versionName}_${variant.name}.apk"
                    output.outputFile = new File(outputFile.parent, fileName)
                    project.logger.lifecycle "Renamed output : ${output.outputFile}"
                }
            }
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res','icons/main']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        XiaoMi{
            res.srcDirs = ['icons/xiaomi']
        }
        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    packagingOptions {
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
    }
}

def boolean hasKeyStore(){
    return hasProperty('STORE_FILE') && hasProperty('STORE_PASSWORD') && hasProperty('KEY_ALIAS') && hasProperty('KEY_PASSWORD');
}
